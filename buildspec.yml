version: 0.2

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

env:
  parameter-store:
    NPM_TOKEN: "/sauerkraut/npm/token"
    GITHUB_TOKEN: "/sauerkraut/github/token"
    GITHUB_NAME: "/sauerkraut/github/name"
    GITHUB_EMAIL: "/sauerkraut/github/email"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

phases:
  install:
    commands:
      - echo "install dependancies..."
      - npm install
    finally:
      - echo "...installed dependancies"

  pre_build:
    commands:
      - echo "node version = $(node --version)"
      - echo "npm version = $(npm --version)"
      - echo "npm token = $NPM_TOKEN"
      - echo "github token = $GITHUB_TOKEN"
      - echo "github name = $GITHUB_NAME"
      - echo "github email = $GITHUB_EMAIL"

      - VERSION=$(node -p "require('./package.json').version")
      - echo "package version = $VERSION"

      - echo "create .npmrc file..."
      # Note: Must reference the file system root ~/.npmrc and not the copy
      # associated to the project
      - echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      - echo "...createed .npmrc file"
      - cat ~/.npmrc

  build:
    commands:
      - echo "create package..."
      - npm run build
      - npm pack

      # The "convoluted" name of the package created from `npm pack`.
      # Example: devon-church-sauerkraut-1.0.0.tgz
      #        : <scope>-<name>-<version>.tgz
      - PACKAGE="devon-church-sauerkraut-$VERSION.tgz"

    finally:
      - echo "...created package"

  post_build:
    commands:
      - echo "publish to npm..."
      - npm publish --access="public"

      - echo "publish to s3..."
      - aws s3 cp ./$PACKAGE s3://sauerkraut/$VERSION.tgz --acl="public-read" --storage-class="REDUCED_REDUNDANCY"

      - echo "publish to github..."
      # Setup config / token authentication to push back up to Github with the
      # release source / tags.
      - git config user.name $GITHUB_NAME
      - git config user.email $GITHUB_EMAIL
      - git remote set-url origin https://devonChurch:$GITHUB_TOKEN@github.com/devonChurch/sauerkraut.git
      # Inside the `master` branch create a new "release" folder that is not
      # attached to the Git index. Place a copy of the required NPM package assets
      # into the release folder.
      - mkdir release
      - cp package.json release/package.json
      - cp package.js release/package.js
      - cp -rf dist release/dist
      # Reset any changed files inside the `master` branch (e.g package-lock.json)
      # so that we can swap to our `release` branch without issue.
      # NOTE: the release folder does not force Git to error out with an "unstaged
      # files" message when swapping branches as it is not part of the Git index.
      - git checkout .
      - git checkout release
      # Create a new `.gitingore` file specifically for the release branch that
      # targets the required required NPM package assets.
      # NOTE: we are "white listing" files not "black listing" files inside the
      # `.gitignore` reference =)
      - rm .gitignore || echo "no .gitignore to remove"
      - echo "/*" >> .gitignore
      - echo "!package.json" >> .gitignore
      - echo "!package.js" >> .gitignore
      - echo "!dist/" >> .gitignore
      # Copy the contents of the `release` folder into the root repository directory
      # (replacing any existing file references).
      - cp -rf release/* ./
      # Create a commit with the new release files and create a new tag reference
      # to said commit =)
      - git add .
      - git commit -m "add release $VERSION assets"
      - git tag -a v$VERSION -m "create v$VERSION release"
      - git push origin release --tags
      # Push up our new bundle to our release branch along with the tag reference.
      # NOTE: The `release` branch ONLY has the bare minimum assets required to
      # appease NPM. The actual "source code" lives on `master`.
      - echo "publish to github..."

    finally:
      - echo "...published to npm"
      - echo "...published to s3"
      - echo "...published to github"

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

cache:
  paths:
    - "node_modules/**/*"
